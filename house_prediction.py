# -*- coding: utf-8 -*-
"""house_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KGCHesFJ51fXUnz3mQZk8gxmbAec_rNk
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error,r2_score

from google.colab import files
uploaded = files.upload()

for filename in uploaded.keys():
  data=pd.read_csv(filename)

print("Shape of data:", data.shape)
print(data.head())
print(data.info())

data.drop(['id', 'date'], axis=1, inplace=True, errors='ignore')

data.fillna(data.median(numeric_only=True), inplace=True)

data['house_age'] = 2025 - data['YrBuilt']
data['since_renovation'] = np.where(data['YrRenovated'] > 0, 2025 - data['YrRenovated'], 0)

data.drop(['YrBuilt', 'Yr_Renovated'], axis=1, inplace=True, errors='ignore')

X = data.drop('SalePrice', axis=1)
y = data['SalePrice']

X = data.drop(['DocumentDate','ym','PropertyType'], axis=1)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("\nModel Coefficients:", model.coef_)
print("Intercept:", model.intercept_)
print("Mean Squared Error:", mse)
print("R2 Score:", r2)

plt.figure(figsize=(8, 5))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual vs Predicted House Prices")
plt.grid(True)
plt.show()

sample_house = pd.DataFrame({
    'PropertyID': [0],
    'zhvi_px': [405100],
    'zhvi_idx': [0.930836],
    'AdjSalePrice': [300805.0],
    'NbrLivingUnits': [2],
    'SqFtLot': [2000],
    'SqFtTotLiving': [2500],
    'SqFtFinBasement': [500],
    'Bathrooms': [3.0],
    'Bedrooms': [6],
    'BldgGrade': [7],
    'TrafficNoise': [0],
    'LandVal': [70000],
    'ImpsVal': [229000],
    'ZipCode': [98002],
    'NewConstruction': [False],
    'house_age': [34],
    'since_renovation': [0],
    'SalePrice':0,
    'PropertyType_Single Family':0,
})
PredictedmodelResult = model.predict(sample_house)
print(PredictedmodelResult[0])